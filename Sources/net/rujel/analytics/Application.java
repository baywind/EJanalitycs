// Generated by the WOLips Templateengine Plug-in at 21.01.2016 11:39:32
package net.rujel.analytics;

import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSForwardException;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSMutableArray;

import net.rujel.analytics.components.Main;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.UTF8Application;
import net.rujel.reusables.Various;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.Iterator;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.webobjects.appserver.WOApplication;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORequestHandler;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOSortOrdering;

public class Application extends UTF8Application {
	public final File home;
	protected String responseURL;
	public JSONArray schools;
	protected NSMutableArray reports;
	protected NSMutableArray<JSONObject> queries;
	
	public String getResponseURL() {
		if(responseURL == null) {
			responseURL = SettingsReader.stringForKeyPath("analytics.responseServiceURL", null);
			if(responseURL == null) {
				responseURL = host() + "/cgi-bin/WebObjects/EJanalytics.woa/wa/respond";
			}
		}
		return responseURL;
	}

	public static void main(String[] argv) {
		WOApplication.main(argv, Application.class);
	}

	public Application() {
		NSLog.out.appendln("Welcome to " + name() + " !");
		WORequestHandler directActionRequestHandler = requestHandlerForKey("wa");
		setDefaultRequestHandler(directActionRequestHandler);
		/* ** put your initialization code in here ** */
		setAllowsConcurrentRequestHandling(true);
		String homePath = SettingsReader.stringForKeyPath("analytics.workingDir", null);
		if(homePath == null)
			throw new IllegalStateException("Analytics working directory is not defined");
		homePath = Various.convertFilePath(homePath);
		home = new File(homePath);
		
		File dir = new File(home,"report");
		if(dir.exists()) {
			JSONArray list = JSONObject.Utility.objectsFromDir(dir);
			reports = new NSMutableArray();
			Iterator iter = list.iterator();
			while (iter.hasNext()) {
				JSONObject object = (JSONObject) iter.next();
				reports.addObject(object);
			}
		}
		dir = new File(home,"school");
		if(dir.exists()) {
			schools = JSONObject.Utility.objectsFromDir(dir);
		}
		
		queries = new NSMutableArray();
		dir = new File(home,"query");
		if(dir.exists()) {
			JSONArray list = JSONObject.Utility.objectsFromDir(dir);
			Iterator iter = list.iterator();
			while (iter.hasNext()) {
				JSONObject object = (JSONObject) iter.next();
				Various.addToSortedList(object, queries, 
						"queryID", EOSortOrdering.CompareDescending);
			}
		}
	}
	
	public WOResponse handleException(Exception anException,  WOContext aContext) {
		return super.handleException(anException, aContext);
	}

	public JSONObject getSchool() {
		if(schools.length() == 1)
			return schools.getJSONObject(0);
		return null;
	}

	public void setNewQuery(JSONObject json) {
		Various.addToSortedList(json, queries, 
				"queryID", EOSortOrdering.CompareDescending);
		try {
			File queryDir = new File(home,"query");
			if(!queryDir.exists())
				queryDir.mkdir();
			File resultFile = new File(queryDir,json.getString("queryID") + ".json");
			FileWriter writer = new FileWriter(resultFile);
			json.write(writer,2,0);
			writer.close();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			throw new NSForwardException(e);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			throw new NSForwardException(e);
		}
	}
	
	public JSONObject getQueryByID(String queryID) {
		if(queries == null || queries.count() == 0)
			return null;
		int min = 0;
		int max = queries.count();
		for (int i = min; i < max; i++) {
			if(i > 5) {
				min = i;
				break;
			}
			JSONObject json = queries.objectAtIndex(i);
			int res = queryID.compareTo(json.getString("queryID"));
			if(res == 0)
				return json;
			if(res > 0)
				return null;
		}
		while(max > min) {
			if((max - min) <= 5) {
				for (int i = min; i < max; i++) {
					JSONObject json = queries.objectAtIndex(i);
					int res = queryID.compareTo(json.getString("queryID"));
					if(res == 0)
						return json;
					if(res > 0)
						return null;
				}
			}
			int idx = (max + min) /2;
			JSONObject json = queries.objectAtIndex(idx);
			int res = queryID.compareTo(json.getString("queryID"));
			if(res == 0)
				return json;
			else if(res > 0)
				max = idx;
			else
				min = idx +1;
		}
		return null;
	}
	
	public File addResponse(NSData response, String schoolID, String queryID) throws IOException {
		File schoolDir = new File(home,"response" + File.separatorChar + schoolID +
				File.separatorChar);
		if(!schoolDir.exists())
			schoolDir.mkdirs();
		BufferedReader rr = new BufferedReader(new InputStreamReader(response.stream()));
		String firstLine = rr.readLine();
		rr.close();
		boolean ok = firstLine.contains("<?xml");
		JSONObject query = getQueryByID(queryID);
		if(query != null) {
			JSONObject bySchool = query.optJSONObject("results");
			if(bySchool == null) {
				bySchool = new JSONObject();
				query.put("results", bySchool);
			}
			if(ok) {
				bySchool.put(schoolID, Main.dateTimeFormat.format(new Date()));
			} else {
				if(firstLine.length() >= 255)
					firstLine = firstLine.substring(0,250) + "...";
				bySchool.put(schoolID,firstLine);
			}
			File resultFile = new File(home,"query" + File.separatorChar + queryID + ".json");
			FileWriter writer = new FileWriter(resultFile);
			query.write(writer,2,0);
			writer.close();

		}
		File resultFile = new File(schoolDir,queryID + ((ok)?".xml":".txt"));
		FileOutputStream fileOutputStream = new FileOutputStream(resultFile);
		response.writeToStream(fileOutputStream);
		fileOutputStream.close();
		return resultFile;
	}
	
}
